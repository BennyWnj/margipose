import torch


class UnitTestData:
    @staticmethod
    def camera_intrinsic():
        return torch.Tensor([
            [1497.6930,    0.0000, 1024.7040,    0.0000],
            [   0.0000, 1497.1030, 1051.3940,    0.0000],
            [   0.0000,    0.0000,    1.0000,    0.0000],
        ])

    @staticmethod
    def camera_extrinsic():
        return torch.Tensor([
            [ 0.9650,  0.0049,  0.2621, -562.8666],
            [-0.0045, -0.9994,  0.0351, 1398.1380],
            [ 0.2622, -0.0351, -0.9644, 3852.6230],
            [ 0.0000,  0.0000,  0.0000,    1.0000],
        ])

    @staticmethod
    def point_in_image_space():
        return torch.Tensor([1014.17, 1091.08])

    @staticmethod
    def point_in_camera_space():
        return torch.Tensor([-26.0276, 98.0811, 3699.6000, 1.0000])

    @staticmethod
    def point_in_world_space():
        return torch.Tensor([483.7779, 1307.2304, 242.6337, 1.0000])

    @staticmethod
    def skeleton_in_camera_space():
        return torch.Tensor([
            [   -6.2660,  -442.2820,  3699.6000,     1.0000],
            [  -25.8740,  -546.0602,  3691.5100,     1.0000],
            [    7.9248,  -365.4806,  3705.0600,     1.0000],
            [    8.0023,  -364.9069,  3705.0914,     1.0000],
            [   21.5102,  -139.4293,  3713.2600,     1.0000],
            [   17.8595,  -618.7620,  3697.4800,     1.0000],
            [   31.7342,  -703.9682,  3696.2600,     1.0000],
            [    5.5187,  -873.1315,  3685.4100,     1.0000],
            [   30.8529,  -590.8081,  3744.1400,     1.0000],
            [   -1.5121,  -551.9054,  3823.5700,     1.0000],
            [  -26.8214,  -595.2059,  4139.3800,     1.0000],
            [  -24.7079,  -610.2892,  4383.5200,     1.0000],
            [  -33.3376,  -601.3405,  4469.8200,     1.0000],
            [   47.3909,  -575.3668,  3662.9000,     1.0000],
            [   31.3814,  -528.3689,  3570.3000,     1.0000],
            [   46.0802,  -422.7603,  3259.5300,     1.0000],
            [   81.6330,  -360.5399,  3018.8300,     1.0000],
            [   90.0443,  -337.3956,  2930.4500,     1.0000],
            [   -2.3616,  -158.1822,  3829.8625,     1.0000],
            [  -25.4480,   401.7153,  3800.5900,     1.0000],
            [ -117.1699,   836.1045,  3780.2000,     1.0000],
            [  -23.6107,   860.4828,  3807.9400,     1.0000],
            [    3.1133,   855.8784,  3812.4200,     1.0000],
            [   45.3821,  -120.6763,  3596.6575,     1.0000],
            [    4.2026,   421.7191,  3670.3300,     1.0000],
            [  -67.3791,   847.6610,  3718.4000,     1.0000],
            [   30.1815,   873.6829,  3704.4200,     1.0000],
            [   56.4233,   867.2651,  3701.0500,     1.0000],
        ])

    @staticmethod
    def skeleton_canonical_univ():
        """Canonical universal skeleton for the first training set example of MPI-3D."""
        return torch.Tensor([
            [  -13.1959,  -311.8857,  3432.7535,     1.0000],
            [   -1.7612,   -73.3127,  3443.9960,     1.0000],
            [   11.4665,    -6.4189,  3325.5349,     1.0000],
            [   26.7039,    49.6704,  3036.0701,     1.0000],
            [   61.0169,    74.8788,  2811.8715,     1.0000],
            [  -20.4321,     6.1147,  3561.4418,     1.0000],
            [  -45.5775,     8.7475,  3855.6012,     1.0000],
            [  -44.8236,    27.9128,  4083.0039,     1.0000],
            [   24.3762,   376.9098,  3350.0855,     1.0000],
            [  -14.3467,   892.1437,  3418.7073,     1.0000],
            [  -81.2602,  1295.4245,  3463.4818,     1.0000],
            [  -21.2546,   373.7019,  3567.3029,     1.0000],
            [  -42.6126,   891.2327,  3540.0372,     1.0000],
            [ -127.9450,  1293.0680,  3521.0451,     1.0000],
            [    1.5608,   375.3058,  3458.6942,     1.0000],
            [  -10.9804,   164.1748,  3451.0856,     1.0000],
            [   11.1684,  -152.8435,  3442.8596,     1.0000],
        ])

    @staticmethod
    def skeleton_canonical_ndc():
        """Canonical NDC skeleton for the first training set example of MPI-3D."""
        return torch.Tensor([
            [ 0.0094, -0.6650, -0.0241,  1.0000],
            [ 0.0190, -0.4652, -0.0136,  1.0000],
            [ 0.0304, -0.4096, -0.1276,  1.0000],
            [ 0.0457, -0.3571, -0.4434,  1.0000],
            [ 0.0828, -0.3276, -0.7328,  1.0000],
            [ 0.0040, -0.3992,  0.0919,  1.0000],
            [-0.0135, -0.3976,  0.3279,  1.0000],
            [-0.0111, -0.3845,  0.4871,  1.0000],
            [ 0.0414, -0.0810, -0.1033,  1.0000],
            [ 0.0084,  0.3453, -0.0373,  1.0000],
            [-0.0469,  0.6700,  0.0044,  1.0000],
            [ 0.0033, -0.1033,  0.0970,  1.0000],
            [-0.0141,  0.3189,  0.0732,  1.0000],
            [-0.0839,  0.6505,  0.0564,  1.0000],
            [ 0.0218, -0.0925,  0.0000,  1.0000],
            [ 0.0113, -0.2675, -0.0070,  1.0000],
            [ 0.0298, -0.5316, -0.0147,  1.0000],
        ])

    @staticmethod
    def joint_tree():
        return [2, 0, 3, 4, 4, 1, 5, 6, 5, 8, 9, 10, 11, 5, 13, 14, 15, 16,
                4, 18, 19, 20, 21, 4, 23, 24, 25, 26]

    @staticmethod
    def root_joint():
        return 4
